diff --git a/modules/audio_coding/acm2/audio_coding_module_impl.cc b/modules/audio_coding/acm2/audio_coding_module_impl.cc
index bc7197d..495fbc0 100644
--- a/modules/audio_coding/acm2/audio_coding_module_impl.cc
+++ b/modules/audio_coding/acm2/audio_coding_module_impl.cc
@@ -134,6 +134,7 @@ class RawAudioEncoderWrapper final : public AudioEncoder {
   void Reset() override { return enc_->Reset(); }
   bool SetFec(bool enable) override { return enc_->SetFec(enable); }
   bool SetDtx(bool enable) override { return enc_->SetDtx(enable); }
+  bool SetCbr(bool enable) override { return enc_->SetCbr(enable); }
   bool SetApplication(Application application) override {
     return enc_->SetApplication(application);
   }
@@ -933,6 +934,22 @@ int AudioCodingModuleImpl::DisableOpusDtx() {
   return encoder_stack_->SetDtx(false) ? 0 : -1;
 }
 
+int AudioCodingModuleImpl::EnableOpusCbr() {
+  rtc::CritScope lock(&acm_crit_sect_);
+  if (!HaveValidEncoder("EnableOpusCbr")) {
+	  return -1;
+  }
+  return encoder_stack_->SetCbr(true) ? 0 : -1;
+}
+
+int AudioCodingModuleImpl::DisableOpusCbr() {
+  rtc::CritScope lock(&acm_crit_sect_);
+  if (!HaveValidEncoder("DisableOpusCbr")) {
+	  return -1;
+  }
+  return encoder_stack_->SetCbr(false) ? 0 : -1;
+}
+
 int32_t AudioCodingModuleImpl::PlayoutTimestamp(uint32_t* timestamp) {
   rtc::Optional<uint32_t> ts = PlayoutTimestamp();
   if (!ts)
diff --git a/modules/audio_coding/acm2/audio_coding_module_impl.h b/modules/audio_coding/acm2/audio_coding_module_impl.h
index c098e62..c2ab6f2 100644
--- a/modules/audio_coding/acm2/audio_coding_module_impl.h
+++ b/modules/audio_coding/acm2/audio_coding_module_impl.h
@@ -185,6 +185,10 @@ class AudioCodingModuleImpl final : public AudioCodingModule {
 
   int DisableOpusDtx() override;
 
+  int EnableOpusCbr() override;
+
+  int DisableOpusCbr() override;
+
   int UnregisterReceiveCodec(uint8_t payload_type) override;
 
   int EnableNack(size_t max_nack_list_size) override;
diff --git a/modules/audio_coding/codecs/audio_encoder.cc b/modules/audio_coding/codecs/audio_encoder.cc
index 000371d..f723302 100644
--- a/modules/audio_coding/codecs/audio_encoder.cc
+++ b/modules/audio_coding/codecs/audio_encoder.cc
@@ -50,6 +50,10 @@ bool AudioEncoder::SetDtx(bool enable) {
   return !enable;
 }
 
+bool AudioEncoder::SetCbr(bool enable) {
+  return !enable;
+}
+
 bool AudioEncoder::SetApplication(Application application) {
   return false;
 }
diff --git a/modules/audio_coding/codecs/audio_encoder.h b/modules/audio_coding/codecs/audio_encoder.h
index f4c5794..3252626 100644
--- a/modules/audio_coding/codecs/audio_encoder.h
+++ b/modules/audio_coding/codecs/audio_encoder.h
@@ -127,6 +127,12 @@ class AudioEncoder {
   // supported).
   virtual bool SetDtx(bool enable);
 
+  // Enables or disables codec-internal CBR mode. Returns true if the codec was
+  // able to comply. The default implementation returns true when asked to
+  // disable CBR and false when asked to enable it (meaning that CBR isn't
+  // supported).
+  virtual bool SetCbr(bool enable);
+
   // Sets the application mode. Returns true if the codec was able to comply.
   // The default implementation just returns false.
   enum class Application { kSpeech, kAudio };
diff --git a/modules/audio_coding/codecs/cng/audio_encoder_cng.cc b/modules/audio_coding/codecs/cng/audio_encoder_cng.cc
index 09c25d9..5a4db31 100644
--- a/modules/audio_coding/codecs/cng/audio_encoder_cng.cc
+++ b/modules/audio_coding/codecs/cng/audio_encoder_cng.cc
@@ -171,6 +171,10 @@ bool AudioEncoderCng::SetDtx(bool enable) {
   return speech_encoder_->SetDtx(enable);
 }
 
+bool AudioEncoderCng::SetCbr(bool enable) {
+  return speech_encoder_->SetCbr(enable);
+}
+
 bool AudioEncoderCng::SetApplication(Application application) {
   return speech_encoder_->SetApplication(application);
 }
diff --git a/modules/audio_coding/codecs/cng/audio_encoder_cng.h b/modules/audio_coding/codecs/cng/audio_encoder_cng.h
index 246e951..5ccb697 100644
--- a/modules/audio_coding/codecs/cng/audio_encoder_cng.h
+++ b/modules/audio_coding/codecs/cng/audio_encoder_cng.h
@@ -59,6 +59,7 @@ class AudioEncoderCng final : public AudioEncoder {
   void Reset() override;
   bool SetFec(bool enable) override;
   bool SetDtx(bool enable) override;
+  bool SetCbr(bool enable) override;
   bool SetApplication(Application application) override;
   void SetMaxPlaybackRate(int frequency_hz) override;
   void SetProjectedPacketLossRate(double fraction) override;
diff --git a/modules/audio_coding/codecs/opus/audio_encoder_opus.cc b/modules/audio_coding/codecs/opus/audio_encoder_opus.cc
index a2497c7..a763228 100644
--- a/modules/audio_coding/codecs/opus/audio_encoder_opus.cc
+++ b/modules/audio_coding/codecs/opus/audio_encoder_opus.cc
@@ -138,6 +138,12 @@ bool AudioEncoderOpus::SetDtx(bool enable) {
   return RecreateEncoderInstance(conf);
 }
 
+bool AudioEncoderOpus::SetCbr(bool enable) {
+  auto conf = config_;
+  conf.cbr_enabled = enable;
+  return RecreateEncoderInstance(conf);
+}
+
 bool AudioEncoderOpus::SetApplication(Application application) {
   auto conf = config_;
   switch (application) {
@@ -263,6 +269,12 @@ bool AudioEncoderOpus::RecreateEncoderInstance(const Config& config) {
   RTC_CHECK_EQ(0,
                WebRtcOpus_SetPacketLossRate(
                    inst_, static_cast<int32_t>(packet_loss_rate_ * 100 + .5)));
+  if (config.cbr_enabled) {
+    RTC_CHECK_EQ(0, WebRtcOpus_EnableCbr(inst_));
+  } else {
+	RTC_CHECK_EQ(0, WebRtcOpus_DisableCbr(inst_));
+  }
+
   config_ = config;
   return true;
 }
diff --git a/modules/audio_coding/codecs/opus/audio_encoder_opus.h b/modules/audio_coding/codecs/opus/audio_encoder_opus.h
index 8900659..445a350 100644
--- a/modules/audio_coding/codecs/opus/audio_encoder_opus.h
+++ b/modules/audio_coding/codecs/opus/audio_encoder_opus.h
@@ -39,6 +39,7 @@ class AudioEncoderOpus final : public AudioEncoder {
     int max_playback_rate_hz = 48000;
     int complexity = kDefaultComplexity;
     bool dtx_enabled = false;
+    bool cbr_enabled = false;
 
    private:
 #if defined(WEBRTC_ANDROID) || defined(WEBRTC_IOS) || defined(WEBRTC_ARCH_ARM)
@@ -68,6 +69,9 @@ class AudioEncoderOpus final : public AudioEncoder {
   // for signaling) about every 400 ms.
   bool SetDtx(bool enable) override;
 
+  // Set Opus in CBR ( Constant bitrate mode )
+  bool SetCbr(bool enable) override;
+
   bool SetApplication(Application application) override;
   void SetMaxPlaybackRate(int frequency_hz) override;
   void SetProjectedPacketLossRate(double fraction) override;
diff --git a/modules/audio_coding/codecs/opus/opus_interface.c b/modules/audio_coding/codecs/opus/opus_interface.c
index bcb0596..da376c4 100644
--- a/modules/audio_coding/codecs/opus/opus_interface.c
+++ b/modules/audio_coding/codecs/opus/opus_interface.c
@@ -197,6 +197,22 @@ int16_t WebRtcOpus_DisableDtx(OpusEncInst* inst) {
   }
 }
 
+int16_t WebRtcOpus_EnableCbr(OpusEncInst* inst) {
+  if (inst) {
+	return opus_encoder_ctl(inst->encoder, OPUS_SET_VBR(0));
+  } else {
+	return -1;
+  }
+}
+
+int16_t WebRtcOpus_DisableCbr(OpusEncInst* inst) {
+  if (inst) {
+    return opus_encoder_ctl(inst->encoder, OPUS_SET_VBR(1));
+  } else {
+    return -1;
+  }
+}
+
 int16_t WebRtcOpus_SetComplexity(OpusEncInst* inst, int32_t complexity) {
   if (inst) {
     return opus_encoder_ctl(inst->encoder, OPUS_SET_COMPLEXITY(complexity));
diff --git a/modules/audio_coding/codecs/opus/opus_interface.h b/modules/audio_coding/codecs/opus/opus_interface.h
index 754b49c..d298cf4 100644
--- a/modules/audio_coding/codecs/opus/opus_interface.h
+++ b/modules/audio_coding/codecs/opus/opus_interface.h
@@ -180,6 +180,32 @@ int16_t WebRtcOpus_EnableDtx(OpusEncInst* inst);
  */
 int16_t WebRtcOpus_DisableDtx(OpusEncInst* inst);
 
+/****************************************************************************
+ * WebRtcOpus_EnableCbr()
+ *
+ * This function enables Opus CBR mode for encoding.
+ *
+ * Input:
+ *      - inst               : Encoder context
+ *
+ * Return value              :  0 - Success
+ *                             -1 - Error
+ */
+int16_t WebRtcOpus_EnableCbr(OpusEncInst* inst);
+
+/****************************************************************************
+ * WebRtcOpus_DisableCbr()
+ *
+ * This function disables Opus CBR mode for encoding.
+ *
+ * Input:
+ *      - inst               : Encoder context
+ *
+ * Return value              :  0 - Success
+ *                             -1 - Error
+ */
+int16_t WebRtcOpus_DisableCbr(OpusEncInst* inst);
+
 /*
  * WebRtcOpus_SetComplexity(...)
  *
diff --git a/modules/audio_coding/codecs/red/audio_encoder_copy_red.cc b/modules/audio_coding/codecs/red/audio_encoder_copy_red.cc
index 7c48c0c..0dd6ca3 100644
--- a/modules/audio_coding/codecs/red/audio_encoder_copy_red.cc
+++ b/modules/audio_coding/codecs/red/audio_encoder_copy_red.cc
@@ -107,6 +107,10 @@ bool AudioEncoderCopyRed::SetDtx(bool enable) {
   return speech_encoder_->SetDtx(enable);
 }
 
+bool AudioEncoderCopyRed::SetCbr(bool enable) {
+  return speech_encoder_->SetCbr(enable);
+}
+
 bool AudioEncoderCopyRed::SetApplication(Application application) {
   return speech_encoder_->SetApplication(application);
 }
diff --git a/modules/audio_coding/codecs/red/audio_encoder_copy_red.h b/modules/audio_coding/codecs/red/audio_encoder_copy_red.h
index ead9fd6..cb35997 100644
--- a/modules/audio_coding/codecs/red/audio_encoder_copy_red.h
+++ b/modules/audio_coding/codecs/red/audio_encoder_copy_red.h
@@ -47,6 +47,7 @@ class AudioEncoderCopyRed final : public AudioEncoder {
   void Reset() override;
   bool SetFec(bool enable) override;
   bool SetDtx(bool enable) override;
+  bool SetCbr(bool enable) override;
   bool SetApplication(Application application) override;
   void SetMaxPlaybackRate(int frequency_hz) override;
   void SetProjectedPacketLossRate(double fraction) override;
diff --git a/modules/audio_coding/include/audio_coding_module.h b/modules/audio_coding/include/audio_coding_module.h
index daf9ac8..8765148 100644
--- a/modules/audio_coding/include/audio_coding_module.h
+++ b/modules/audio_coding/include/audio_coding_module.h
@@ -764,6 +764,27 @@ class AudioCodingModule {
   virtual int DisableOpusDtx() = 0;
 
   ///////////////////////////////////////////////////////////////////////////
+  // EnableOpusCbr()
+  // Enable the CBR, if current send codec is Opus.
+  //
+  // Return value:
+  //   -1 if current send codec is not Opus or error occurred in enabling the
+  //      Opus CBR mode.
+  //    0 if Opus CBR is enabled successfully.
+  //
+  virtual int EnableOpusCbr() = 0;
+
+  ///////////////////////////////////////////////////////////////////////////
+  // int DisableOpusCbr()
+  // If current send codec is Opus, disables its internal CBR.
+  //
+  // Return value:
+  //   -1 if current send codec is not Opus or error occurred in disabling CBR.
+  //    0 if Opus CBR is disabled successfully.
+  //
+  virtual int DisableOpusCbr() = 0;
+
+  ///////////////////////////////////////////////////////////////////////////
   //   statistics
   //
 
diff --git a/voice_engine/channel.cc b/voice_engine/channel.cc
index 37b0270..8075f9f 100644
--- a/voice_engine/channel.cc
+++ b/voice_engine/channel.cc
@@ -1449,6 +1449,19 @@ int Channel::SetOpusDtx(bool enable_dtx) {
   return 0;
 }
 
+int Channel::SetOpusCbr(bool enable_cbr) {
+    WEBRTC_TRACE(kTraceInfo, kTraceVoice, VoEId(_instanceId, _channelId),
+                "Channel::SetOpusCbr(%d)", enable_cbr);
+    int ret = enable_cbr ? audio_coding_->EnableOpusCbr()
+    : audio_coding_->DisableOpusCbr();
+    if (ret != 0) {
+        _engineStatisticsPtr->SetLastError(VE_AUDIO_CODING_MODULE_ERROR,
+                                               kTraceError, "SetOpusCbr() failed");
+        return -1;
+    }
+    return 0;
+}
+
 int32_t Channel::RegisterExternalTransport(Transport* transport) {
   WEBRTC_TRACE(kTraceInfo, kTraceVoice, VoEId(_instanceId, _channelId),
                "Channel::RegisterExternalTransport()");
diff --git a/voice_engine/channel.h b/voice_engine/channel.h
index ac49e28..7db42b5 100644
--- a/voice_engine/channel.h
+++ b/voice_engine/channel.h
@@ -216,6 +216,7 @@ class Channel
   int32_t SetSendCNPayloadType(int type, PayloadFrequencies frequency);
   int SetOpusMaxPlaybackRate(int frequency_hz);
   int SetOpusDtx(bool enable_dtx);
+  int SetOpusCbr(bool enable_cbr);
 
   // VoENetwork
   int32_t RegisterExternalTransport(Transport* transport);
diff --git a/voice_engine/include/voe_codec.h b/voice_engine/include/voe_codec.h
index 6c4fb38..fcb7b7c 100644
--- a/voice_engine/include/voe_codec.h
+++ b/voice_engine/include/voe_codec.h
@@ -132,6 +132,10 @@ class WEBRTC_DLLEXPORT VoECodec {
   // success, and -1 if failed.
   virtual int SetOpusDtx(int channel, bool enable_dtx) = 0;
 
+  // If send codec is Opus on a specified |channel|, set its CBR. Returns 0 if
+  // success, and -1 if failed.
+  virtual int SetOpusCbr(int channel, bool enable_cbr) = 0;
+
   // Get a pointer to the event logging object associated with this Voice
   // Engine. This pointer will remain valid until VoiceEngine is destroyed.
   virtual RtcEventLog* GetEventLog() = 0;
diff --git a/voice_engine/voe_codec_impl.cc b/voice_engine/voe_codec_impl.cc
index 5a16592..e26da90 100644
--- a/voice_engine/voe_codec_impl.cc
+++ b/voice_engine/voe_codec_impl.cc
@@ -376,6 +376,23 @@ int VoECodecImpl::SetOpusDtx(int channel, bool enable_dtx) {
   return channelPtr->SetOpusDtx(enable_dtx);
 }
 
+int VoECodecImpl::SetOpusCbr(int channel, bool enable_cbr) {
+    WEBRTC_TRACE(kTraceApiCall, kTraceVoice, VoEId(_shared->instance_id(), -1),
+                 "SetOpusDtx(channel=%d, enable_dtx=%d)", channel, enable_cbr);
+    if (!_shared->statistics().Initialized()) {
+        _shared->SetLastError(VE_NOT_INITED, kTraceError);
+        return -1;
+    }
+    voe::ChannelOwner ch = _shared->channel_manager().GetChannel(channel);
+    voe::Channel* channelPtr = ch.channel();
+    if (channelPtr == NULL) {
+        _shared->SetLastError(VE_CHANNEL_NOT_VALID, kTraceError,
+                          "SetOpusDtx failed to locate channel");
+        return -1;
+    }
+    return channelPtr->SetOpusCbr(enable_cbr);
+}
+
 RtcEventLog* VoECodecImpl::GetEventLog() {
   return _shared->channel_manager().GetEventLog();
 }
diff --git a/voice_engine/voe_codec_impl.h b/voice_engine/voe_codec_impl.h
index 5095f6e..459963e 100644
--- a/voice_engine/voe_codec_impl.h
+++ b/voice_engine/voe_codec_impl.h
@@ -58,6 +58,8 @@ class VoECodecImpl : public VoECodec {
 
   int SetOpusDtx(int channel, bool enable_dtx) override;
 
+  int SetOpusCbr(int channel, bool enable_cbr) override;
+
   RtcEventLog* GetEventLog() override;
 
  protected:
